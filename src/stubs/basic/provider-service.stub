<?php

namespace {{ namespace }};

use Illuminate\Support\Facades\Blade;
use Illuminate\Support\Facades\File;
use Illuminate\Support\ServiceProvider;
use RecursiveDirectoryIterator;
use RecursiveIteratorIterator;
use Teksite\Module\Facade\Module;


class {{ class }} extends ServiceProvider
{
    public const TYPE='self-service';

    protected string $moduleName = '{{ module }}';


    /**
     * Register the service provider.
     */
    public function register(): void
    {
        $this->app->register(EventServiceProvider::class);
        $this->app->register(RouteServiceProvider::class);
    }

    /**
     * Boot the application events.
     */
    public function boot(): void
    {
        $this->registerCommands();
        $this->registerCommandSchedules();
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
        $this->loadModuleMigrations();

    }


     private function loadModuleMigrations(): void
     {
        $migrationPath=Module::modulePath('Lareon' , config('moduleconfigs.module.database.migration_path' , 'Database/Migrations'));

        if (is_dir($migrationPath)) {
            $this->loadMigrationsFrom(module_path('Lareon', config('moduleconfigs.module.database.migration_path' , 'Database/Migrations')));
        }

     }
    /**
     * Register commands in the format of Command::class
     */
    protected function registerCommands(): void
    {
        // $this->commands([]);
    }

    /**
     * Register command Schedules.
     */
    protected function registerCommandSchedules(): void
    {
        // $this->app->booted(function () {
        //     $schedule = $this->app->make(Schedule::class);
        //     $schedule->command('inspire')->hourly();
        // });
    }

    /**
     * Register translations.
     */
    public function registerTranslations(): void
    {
        $langPath = module_path('Lareon' , config('moduleconfigs.module.lang_path' , 'lang'));

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, 'lareon');
            $this->loadJsonTranslationsFrom($langPath);
        }
    }

    /**
     * Register config.
     */
    protected function registerConfig(): void
    {
         $this->publishes([
                  __DIR__ . '/config/cms.php' => config_path('cms.php')
              ], 'cms');
    }

    /**
     * Register views.
     */
    public function registerViews(): void
    {
         // Path to the module's custom views directory
         $viewPath = resource_path('views/modules/'.'lareon');

         // Path to the module's source views directory
         $sourcePath = module_path('Lareon', 'resources/views');

         // Publish the module views to the main application views folder
         $this->publishes([$sourcePath => $viewPath], ['views', 'lareon'.'-module-views']);

         // Merge the default view paths with the module's custom views
         $this->loadViewsFrom(array_merge($this->getPublishableViewPaths(), [$sourcePath]), 'lareon');

         // Optionally, register Blade components if your module uses them
         $componentNamespace = module_namespace(
             'Lareon',module_path('Lareon', 'App/View/Components'));


         Blade::componentNamespace($componentNamespace, 'lareon');
    }

    /**
     * Get the services provided by the provider.
     */
    public function provides(): array
    {
        return [];
    }

    private function getPublishableViewPaths(): array
    {
        $paths = [];
        foreach (config('view.paths') as $path) {
            if (is_dir($path.'/modules/'.'lareon')) {
                $paths[] = $path.'/modules/'.'lareon';
            }
        }

        return $paths;
    }


    public function publish(): void
    {
        $this->publishes([
            __DIR__ . '/config/cms.php' => config_path('cms.php')
        ], 'cms');

    }
}
